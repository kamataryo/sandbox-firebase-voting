{"version":3,"sources":["config.js","hooks/index.js","colors.js","components/button.js","components/layout.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firebase","initializeApp","database","dataRef","ref","resetFirebase","set","chartColors","Button","styled","button","_templateObject","props","color","Dl","dl","layout_templateObject","Dt","dt","_templateObject2","Dd","dd","_templateObject3","AppContainer","div","_templateObject4","MainContainer","_templateObject5","options","id","name","App","_useFirebase","_useState","useState","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","isReady","setLoading","useEffect","once","then","toJSON","on","snapshot","setTimeout","val","concat","value","nextValue","parseInt","useFirebase","_useFirebase2","_useFirebase2$","incrementValueOf","react_default","a","createElement","className","chartData","map","_ref","_ref2","index","key","components_button","length","onClick","PieChart","width","height","Pie","animationDuration","dataKey","nameKey","cx","cy","innerRadius","outerRadius","fill","labelLine","_ref3","Cell","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6753eb12.chunk.js","sourcesContent":["export const config = {\n  apiKey: 'AIzaSyDCau-Alxu0p7p-rekxrqfPi-L4rLPcqS8',\n  authDomain: 'sanndbox-firebase-voting.firebaseapp.com',\n  databaseURL: 'https://sanndbox-firebase-voting.firebaseio.com',\n  projectId: 'sanndbox-firebase-voting',\n  storageBucket: 'sanndbox-firebase-voting.appspot.com',\n  messagingSenderId: '868284345723',\n}\n\nexport default config\n","import { useState, useEffect } from 'react'\nimport firebase from 'firebase/app'\nimport 'firebase/database'\nimport config from '../config'\n\n// Initialize Firebase\nfirebase.initializeApp(config)\nconst database = firebase.database()\nconst dataRef = database.ref('/data')\n\nexport const resetFirebase = () => dataRef.set({})\n\nexport const useFirebase = () => {\n  const [data, setData] = useState({})\n  const [isReady, setLoading] = useState(false)\n\n  useEffect(() => {\n    dataRef.once('value').then(data => {\n      setData(data.toJSON() || {})\n      setLoading(true)\n    })\n\n    dataRef.on('value', snapshot =>\n      setTimeout(() => setData(snapshot.val() || {}, 300)),\n    )\n  }, [])\n\n  const incrementValueOf = id => {\n    const ref = database.ref(`/data/${id}`)\n    ref.once('value').then(value => {\n      const nextValue = (parseInt(value.toJSON(), 10) || 0) + 1\n      ref.set(nextValue)\n    })\n  }\n\n  return [{ data, isReady }, incrementValueOf]\n}\n","export const blue = '#61dafb'\nexport const black = '#282c34'\nexport const white = '#fff'\nexport const purple = '#8884d8'\n\nexport const chartColors = [purple, '#84d888', '#d88488', blue]\n","import styled from 'styled-components'\nimport { black } from '../colors'\n\nexport const Button = styled.button`\n  display: inline-block;\n  padding: 0.5em 1em;\n  text-decoration: none;\n  background: ${props => props.color};\n  color: ${black};\n  border-radius: 3px;\n  outline: none;\n  border: none;\n\n  &:hover {\n    cursor: pointer;\n  }\n`\n\nexport default Button\n","import styled from 'styled-components'\nimport { white, black } from '../colors'\n\nexport const Dl = styled.dl`\n  margin: calc(10px + 2vmin);\n`\n\nexport const Dt = styled.dt`\n  text-align: left;\n`\n\nexport const Dd = styled.dd`\n  margin: 0;\n  width: 180px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n`\n\nexport const AppContainer = styled.div`\n  width: 100vw;\n  background-color: ${black};\n  min-height: 100vh;\n  font-size: calc(10px + 2vmin);\n  color: ${white};\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n`\n\nexport const MainContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  align-items: center;\n  flex-wrap: wrap;\n`\n","import React from 'react'\nimport { useFirebase, resetFirebase } from './hooks'\nimport { PieChart, Pie, Cell } from 'recharts'\nimport Button from './components/button'\n\nimport { AppContainer, MainContainer, Dl, Dt, Dd } from './components/layout'\n\nimport { purple, chartColors } from './colors'\n\nconst options = [\n  { id: 0, name: '台南担仔麺' },\n  { id: 1, name: '魯肉飯' },\n  { id: 2, name: '虱目魚粥' },\n  { id: 3, name: '排骨飯' },\n]\n\nexport const App = () => {\n  const [{ data, isReady }, incrementValueOf] = useFirebase()\n\n  if (!isReady) {\n    return (\n      <main className={ 'App' }>\n        <AppContainer>{'loading...'} </AppContainer>\n      </main>\n    )\n  }\n\n  const chartData = options.map(({ id, name }) => ({\n    id,\n    name,\n    value: data[id],\n  }))\n\n  return (\n    <main className={ 'App' }>\n      <AppContainer>\n        <h1>\n          <small>{'リアルタイム投票で決める'}</small>\n          <br />\n          {'最強台湾料理決定戦'}\n        </h1>\n        <MainContainer>\n          <div>\n            {options.map(({ id, name }, index) => (\n              <Dl key={ id }>\n                <Dt>{name}</Dt>\n                <Dd>\n                  <span>{`現在 ${data[id] || 0}票`}</span>\n                  <Button\n                    color={ chartColors[index % chartColors.length] }\n                    onClick={ () => incrementValueOf(id) }\n                  >\n                    {'+1'}\n                  </Button>\n                </Dd>\n              </Dl>\n            ))}\n          </div>\n          <div>\n            <PieChart width={ 210 } height={ 210 }>\n              <Pie\n                animationDuration={ 200 }\n                data={ chartData }\n                dataKey={ 'value' }\n                nameKey={ 'name' }\n                cx={ '50%' }\n                cy={ '50%' }\n                innerRadius={ 60 }\n                outerRadius={ 100 }\n                fill={ purple }\n                labelLine={ false }\n              >\n                {chartData.map(({ id }, index) => (\n                  <Cell\n                    key={ id }\n                    fill={ chartColors[index % chartColors.length] }\n                  />\n                ))}\n              </Pie>\n            </PieChart>\n          </div>\n        </MainContainer>\n        <p>\n          <button onClick={ resetFirebase }>{'全てを無に帰す'}</button>\n        </p>\n      </AppContainer>\n    </main>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}